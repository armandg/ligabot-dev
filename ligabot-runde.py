#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import datetime
from time import sleep
import praw
import ligabot.config
import ligabot.uselog
import ligabot.scraping
import ligabot.posting

config = ligabot.config.get_config()

uselog = ligabot.uselog.uselog

scraping = ligabot.scraping
posting = ligabot.posting
calculating = ligabot.calculating
round_start_stop = calculating.round_start_stop

subreddit = config['reddit']['subreddit']


# Authenticate to reddit
try:
    uselog('Authenticating to reddit...')
    r = praw.Reddit(client_id=config['reddit']['client_id'],
                    client_secret=config['reddit']['client_secret'],
                    password=config['reddit']['password'],
                    user_agent=config['reddit']['useragent'],
                    username=config['reddit']['username'])
    uselog('Authenticating OK.')
except Exception as e:
    uselog('Couldn\'t authenticate to reddit:\n{}'.format(e))
    sys.exit()

dt = datetime.datetime
nowdate = dt.now().strftime('%d.%m.%Y')
fulldate = dt.now().strftime('%d.%m.%Y %H.%M.%S')

postponed_file = 'postponed_matches.list'


try:
    uselog('Getting league from input...')
    league = str(sys.argv[1])
except IndexError:
    uselog('You didn\'t specify \'league\'. Running in test mode...')
    league = False

def main():
    # Before anything else check the 'postponed_matches.cache'
    # (generated by the function 'get_raw_round')
    #  - if a match in cache
    #    - check it's date. if within normal range (+/- 2 days),
    #      post it.
    #    - posting has to be done with a slightly different title and text

    # Get the essentials
    _get_matches = scraping.get_matches(league)
    _get_raw_table = scraping.get_raw_table(league)
    # '_get_raw_round' checks if the next round starts within two days. If not
    # it stops the script
    _get_raw_round = scraping.get_raw_round(league,
                                            _get_matches['all_matches'],
                                            postponed_file)
    _get_full_round = scraping.get_full_round(
        _get_raw_table,
        _get_raw_round['round_matches'])
    _get_table = scraping.get_table(_get_raw_table, _get_full_round)

    league_name = _get_matches['league_name']
    active_round = _get_raw_round['active_round']

    # Make the normal post
    round_text = posting.make_round_post(league,
                                         _get_full_round,
                                         _get_table,
                                         league_name,
                                         active_round
                                         )
    posted_object = posting.post_to_reddit(r, league_name, active_round,
                                           round_text, subreddit)
    # Countdown
    _round_start_stop = round_start_stop(league, _get_raw_round['round_matches'])

    _round_start = _round_start_stop['start_seconds']
    uselog('Roundstart: {}'.format(_round_start))
    # Sove fram til margintid før rundestart. Sov så det gjenstår ca litt over
    # 1 time før rundestart (1 time tilsvarer 3600 sekunder)
#    if league:
#        _round_start -= 3800
#    uselog('_round_start: {}'.format(_round_start))
    if _round_start > 0:
        uselog('Sleeping for {} seconds', format(_round_start))
        sleep(_round_start)

    # Lag kamptråder der det blir riktig
    #posting.post_match_threads(posted_object.id, _get_full_round)

    # Starter runden
    uselog('Round started')
    sleep(2)

    while calculating.round_start_stop(league,
                                       scraping.get_raw_round(league,
                                   scraping.get_matches(league)['all_matches'],
                                   postponed_file)['round_matches'])['stop_round'] is False:
        # Updating match info
        uselog('Checking for new scores...')
        posting.post_update(r, 'kamper', posting.make_round_post_matches(
            scraping.get_full_round(_get_raw_table, scraping.get_raw_round(
                league, scraping.get_matches(league)['all_matches'],
                postponed_file)['round_matches']
            )
        ),
            submission=posted_object.id)
        # Sleep before starting with new update of round
        sleep(10)


if __name__ == "__main__":
    main()
